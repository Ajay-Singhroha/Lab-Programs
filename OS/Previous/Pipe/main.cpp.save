#include
#include
#include
#include
<sys/types.h>
<stdio.h>
<string.h>
<unistd.h>
#define BUFFER_SIZE 25
#define READ_END 0
#define WRITE_END 1
int main(void)
{
	char write_msg[BUFFER_SIZE]
	char read_msg[BUFFER_SIZE];
	int fd[2];
	pid_t pid;
	"Greetings";
	program continues in Figure 3.24
	Figure 3.23 Ordinary pipes in UNIX.136
	Chapter 3
	I* create the pipe *I
	if (pipe(fd) == -1)
	{
		fprintf(stderr,"Pipe failed");
		return 1;
	}
	I* fork a child process
	pid = fork();
	*I
	if (pid < 0)
	{
		I* error occurred *I
		fprintf(stderr, "Fork Failed");
		return 1;
	}
	if (pid > 0)
	{
		I* parent process *I
		I* close the unused end of the pipe
		close(fd[READ_END]);
		*I
		I* write to the pipe *I
		write(fd[WRITE_END], write_msg, strlen(write_msg)+1);
		I*
		close the write end of the pipe
		close(fd[WRITE_END]);
		*I
	}
	else
	{
		I* child process *I
		I* close the unused end of the pipe
		close(fd[WRITE_END]);
		*I
		I* read from the pipe *I
		read(fd[READ_END], read_msg, BUFFER_SIZE);
		printf ("read %s", read_msg) ;
		I*
		close the write end of the pipe
		close(fd[READ_END]);
		*I
	}
	return 0;
}
